<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Changes on the fly by IPI</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Aptos:wght@400;700&display=swap">
  <style>
    * {
      box-sizing: border-box;
    }
    body {
      font-family: 'Aptos', Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f0f0f0;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }
    header {
      background-color: #63AB8F;
      color: white;
      padding: 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    header h1 {
      margin: 0;
    }
    .container {
      flex: 1;
      display: flex;
    }
    .sidebar {
      width: 250px;
      background-color: #ccc;
      padding: 20px;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    .sidebar button {
      background-color: #ccc;
      border: none;
      padding: 10px;
      text-align: left;
      cursor: pointer;
      font-size: 16px;
      color: black;
      width: 100%;
    }
    .sidebar button:hover {
      background-color: #bbb;
    }
    .sidebar button.active {
      background-color: #63AB8F;
      color: white;
    }
    .content {
      flex: 1;
      padding: 20px;
      background-color: white;
      overflow-y: auto;
    }
    .tabcontent {
      display: none;
    }
    /* Scoped styles for External Work Creation */
    #external-work-container {
      margin: 20px;
      padding: 20px;
      font-family: 'Aptos', Arial, sans-serif;
    }
    #external-work-container #logo-container {
      text-align: center;
      margin-bottom: 20px;
    }
    #external-work-container #logo {
      width: 300px;
    }
    #external-work-container label {
      margin-top: 10px;
      display: block;
      font-weight: bold;
    }
    #external-work-container select,
    #external-work-container input,
    #external-work-container button {
      margin-top: 5px;
      padding: 8px;
      width: 100%;
      max-width: 300px;
    }
    #external-work-container #statusMessage {
      margin-top: 20px;
      color: green;
    }
    /* Scoped styles for Management Unit Search */
    #mu-search-container {
      margin: 20px;
      padding: 20px;
      font-family: 'Aptos', Arial, sans-serif;
    }
    #mu-search-container #logo-container {
      text-align: center;
      margin-bottom: 20px;
    }
    #mu-search-container #logo {
      width: 300px;
    }
    #mu-search-container h1 {
      font-size: 24px;
    }
    #mu-search-container label,
    #mu-search-container select,
    #mu-search-container input,
    #mu-search-container button {
      display: block;
      margin: 10px 0;
    }
    #mu-search-container label {
      font-weight: bold;
    }
    #mu-search-container select,
    #mu-search-container input,
    #mu-search-container button {
      margin-top: 10px;
      padding: 12px;
      width: 100%;
      max-width: 400px;
      font-size: 16px;
    }
    #mu-search-container #results {
      margin-top: 20px;
    }
    #mu-search-container #results p {
      font-weight: normal;
    }
  </style>
</head>
<body>
  <header>
    <h1>Changes on the fly by IPI</h1>
    <div class="logo">
      <img src="https://raw.githubusercontent.com/gmcglynn88/TimeoffApp/main/IPI_Primary%20Identity_Corporate_REVERSED_ECC.png" alt="Consulting Logo" height="50">
    </div>
  </header>
  <div class="container">
    <div class="sidebar">
      <button class="tablink" onclick="openTab(event, 'wfmActivity')">WFM Activity Management</button>
      <button class="tablink" onclick="openTab(event, 'wfmManagement')">WFM Management Unit Search</button>
      <button class="tablink" onclick="openTab(event, 'externalWork')">External Work Creation</button>
      <button class="tablink" onclick="openTab(event, 'bulkChanges')">Bulk Skill & Queues Changes</button>
    </div>
    <div class="content">
      <div id="wfmActivity" class="tabcontent">
        <h2>WFM Activity Management</h2>
        <p>Content goes here...</p>
      </div>
      <div id="wfmManagement" class="tabcontent">
        <!-- Management Unit Search Code -->
        <div id="mu-search-container">
          <div id="logo-container">
            <img id="logo" src="https://raw.githubusercontent.com/gmcglynn88/Management-Unit-Search/main/Consultinglogo%20(2).png" alt="Company Logo">
          </div>
          <h1>Which MU did I put you in?</h1>
          <label for="searchUser">Search users:</label>
          <input type="text" id="searchUser" placeholder="Type to filter users...">
          <label for="agentSelect">Select an Agent:</label>
          <select id="agentSelect"></select>
          <button id="lookupBtn">Get Management Unit</button>
          <div id="results"></div>
        </div>
      </div>
      <div id="externalWork" class="tabcontent">
        <!-- External Work Creation Code -->
        <div id="external-work-container">
          <div id="logo-container">
            <img id="logo" src="https://raw.githubusercontent.com/gmcglynn88/ExternalWorkCreation/main/Consultinglogo.png" alt="Company Logo">
          </div>
          <h1>External Work Creation</h1>
          <label for="queueSelect">Select Queue:</label>
          <select id="queueSelect"></select>
          <label for="userSelect">Select User:</label>
          <select id="userSelect"></select>
          <label for="externalReference">External Reference:</label>
          <input type="text" id="externalReference" placeholder="Enter external reference (optional)">
          <button id="createInteractionBtn">Create Proxy Interaction</button>
          <div id="statusMessage"></div>
        </div>
      </div>
      <div id="bulkChanges" class="tabcontent">
        <h2>Bulk Skill & Queues Changes</h2>
        <p>Content goes here...</p>
      </div>
    </div>
  </div>
  <script>
    // =======================
    // Global Client Credentials
    // (For testing only â€“ do not expose secrets in production!)
    // External Work Creation Credentials:
    const clientId = '80d7c7c9-600e-478e-8d41-1bfb7b8c6bc1';
    const clientSecret = 'BQQBxTIiCO-mY1RFm9TL0NcmhtRewKlqozD0GUdiMdE';
    
    // =======================
    // Tab Functionality & Initialization Flags
    let externalWorkInitialized = false;
    let muSearchInitialized = false;
    
    function openTab(evt, tabName) {
      var i, tabcontent, tablinks;
      tabcontent = document.getElementsByClassName("tabcontent");
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
      }
      tablinks = document.getElementsByClassName("tablink");
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].classList.remove("active");
      }
      document.getElementById(tabName).style.display = "block";
      evt.currentTarget.classList.add("active");
      
      // Initialize External Work Creation on first activation
      if(tabName === 'externalWork' && !externalWorkInitialized) {
        initExternalWorkCreation();
        externalWorkInitialized = true;
      }
      // Initialize Management Unit Search on first activation
      if(tabName === 'wfmManagement' && !muSearchInitialized) {
        initManagementUnitSearch();
        muSearchInitialized = true;
      }
    }
    
    // Open the first tab by default on page load
    document.addEventListener("DOMContentLoaded", function() {
      document.getElementsByClassName("tablink")[0].click();
    });
    
    // =======================
    // External Work Creation Code
    function initExternalWorkCreation() {
      const redirectUri = 'https://gmcglynn88.github.io/ExternalWorkCreation/';
      const responseType = 'token';
      const oauthUrl = `https://login.mypurecloud.ie/oauth/authorize?client_id=${clientId}&response_type=${responseType}&redirect_uri=${encodeURIComponent(redirectUri)}`;
    
      // Check for token in URL hash
      const hash = window.location.hash.substring(1);
      const params = new URLSearchParams(hash);
      const token = params.get('access_token');
    
      if (!token) {
        window.location.href = oauthUrl;
      } else {
        initializeApp(token);
      }
    }
    
    function initializeApp(token) {
      populateDropdowns(token);
      document.getElementById('createInteractionBtn').addEventListener('click', () => {
        createInteraction(token);
      });
    }
    
    async function populateDropdowns(token) {
      try {
        const queues = await fetchAllPages('https://api.mypurecloud.ie/api/v2/routing/queues', token);
        const users = await fetchAllPages('https://api.mypurecloud.ie/api/v2/users', token);
    
        const queueSelect = document.getElementById('queueSelect');
        queues.forEach(queue => {
          const option = document.createElement('option');
          option.value = queue.id;
          option.text = queue.name;
          queueSelect.add(option);
        });
    
        const userSelect = document.getElementById('userSelect');
        users.forEach(user => {
          const option = document.createElement('option');
          option.value = user.id;
          option.text = user.name;
          userSelect.add(option);
        });
    
      } catch (error) {
        console.error('Error populating dropdowns:', error);
        document.getElementById('statusMessage').innerText = `Error loading data: ${error.message}`;
      }
    }
    
    async function fetchAllPages(url, token) {
      let allItems = [];
      let pageNumber = 1;
      let hasMorePages = true;
    
      while (hasMorePages) {
        const response = await fetch(`${url}?pageNumber=${pageNumber}&pageSize=25`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
    
        if (!response.ok) {
          throw new Error(`Error fetching data: ${response.status} ${response.statusText}`);
        }
    
        const data = await response.json();
        allItems = allItems.concat(data.entities);
    
        if (data.pageCount > pageNumber) {
          pageNumber++;
        } else {
          hasMorePages = false;
        }
      }
      return allItems;
    }
    
    async function createInteraction(token) {
      const queueId = document.getElementById('queueSelect').value;
      const userId = document.getElementById('userSelect').value;
      const externalReference = document.getElementById('externalReference').value;
    
      try {
        const interactionResponse = await fetch('https://api.mypurecloud.ie/api/v2/conversations/emails', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            queueId: queueId,
            provider: 'QualityForm',
            direction: 'INBOUND',
            fromName: 'External Work',
            attributes: { 'External Link': externalReference }
          })
        });
    
        if (!interactionResponse.ok) {
          throw new Error(`Error creating interaction: ${interactionResponse.status} ${interactionResponse.statusText}`);
        }
    
        const interaction = await interactionResponse.json();
        const conversationId = interaction.id;
    
        const conversationDetailsResponse = await fetch(`https://api.mypurecloud.ie/api/v2/conversations/${conversationId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (!conversationDetailsResponse.ok) {
          throw new Error(`Error fetching conversation details: ${conversationDetailsResponse.status} ${conversationDetailsResponse.statusText}`);
        }
        const conversationDetails = await conversationDetailsResponse.json();
        const participantId = conversationDetails.participants[1].id;
    
        const assignResponse = await fetch(`https://api.mypurecloud.ie/api/v2/conversations/emails/${conversationId}/participants/${participantId}/replace`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ userId: userId })
        });
    
        if (!assignResponse.ok) {
          throw new Error(`Error assigning user: ${assignResponse.status} ${assignResponse.statusText}`);
        }
    
        const disconnectResponse = await fetch(`https://api.mypurecloud.ie/api/v2/conversations/emails/${conversationId}`, {
          method: 'PATCH',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ state: 'disconnected' })
        });
    
        if (!disconnectResponse.ok) {
          throw new Error(`Error disconnecting conversation: ${disconnectResponse.status} ${disconnectResponse.statusText}`);
        }
    
        document.getElementById('statusMessage').innerText = 'Interaction created and assigned successfully!';
    
      } catch (error) {
        console.error('Error during interaction creation:', error);
        document.getElementById('statusMessage').innerText = `Error: ${error.message}`;
      }
    }
    
    // =======================
    // Management Unit Search Code (mu-prefixed)
    let muAccessToken = null;
    let muAllUsers = [];
    const muRegion = "mypurecloud.ie";
    
    function muExtractTokenFromUrl() {
      const hash = window.location.hash.substring(1);
      const params = new URLSearchParams(hash);
      return params.get("access_token");
    }
    
    async function initManagementUnitSearch() {
      const muClientId = "5f8da5c2-f8ef-4168-a321-f06e16f558f3";
      const muRedirectUri = "https://gmcglynn88.github.io/Management-Unit-Search/";
      const muResponseType = "token";
      const muOauthUrl = `https://login.${muRegion}/oauth/authorize?client_id=${muClientId}&response_type=${muResponseType}&redirect_uri=${encodeURIComponent(muRedirectUri)}`;
    
      const token = muExtractTokenFromUrl();
      if (!token) {
        window.location.href = muOauthUrl;
      } else {
        muAccessToken = token;
        await muLoadAllUsers();
        muInitSearchAndDropdown();
        document.getElementById("lookupBtn").addEventListener("click", onMuGetManagementUnitClick);
        document.getElementById("searchUser").addEventListener("keypress", function(event) {
          if (event.key === "Enter") {
            onMuGetManagementUnitClick();
          }
        });
      }
    }
    
    async function muLoadAllUsers() {
      try {
        let pageNumber = 1;
        let morePages = true;
        muAllUsers = [];
        while (morePages) {
          const url = `https://api.${muRegion}/api/v2/users?pageNumber=${pageNumber}&pageSize=100`;
          const resp = await fetch(url, {
            headers: {
              "Authorization": `Bearer ${muAccessToken}`,
              "Content-Type": "application/json"
            }
          });
          if (!resp.ok) {
            throw new Error(`Failed to fetch users (page ${pageNumber}): ${resp.status}`);
          }
          const data = await resp.json();
          if (data.entities) {
            muAllUsers = muAllUsers.concat(data.entities);
          }
          if (pageNumber < data.pageCount) {
            pageNumber++;
          } else {
            morePages = false;
          }
        }
        console.log(`Loaded ${muAllUsers.length} total users.`);
      } catch (err) {
        console.error("Error loading all users:", err);
        document.getElementById("results").textContent = `Error: ${err.message}`;
      }
    }
    
    function muInitSearchAndDropdown() {
      const searchBox = document.getElementById("searchUser");
      searchBox.addEventListener("input", () => {
        muFilterAndPopulateUsers(searchBox.value);
      });
      muFilterAndPopulateUsers("");
    }
    
    function muFilterAndPopulateUsers(searchTerm) {
      const agentSelect = document.getElementById("agentSelect");
      agentSelect.innerHTML = "";
      const lowerSearch = searchTerm.toLowerCase();
      const filtered = muAllUsers.filter(u => {
        const nameMatch = (u.name || "").toLowerCase().includes(lowerSearch);
        const userNameMatch = (u.username || "").toLowerCase().includes(lowerSearch);
        return nameMatch || userNameMatch;
      });
    
      if (filtered.length === 0) {
        const opt = document.createElement("option");
        opt.value = "";
        opt.text = "No users found";
        agentSelect.add(opt);
        return;
      }
    
      filtered.forEach(u => {
        const opt = document.createElement("option");
        opt.value = u.id;
        opt.text = u.name || u.username || u.id;
        agentSelect.add(opt);
      });
    }
    
    async function onMuGetManagementUnitClick() {
      const agentSelect = document.getElementById("agentSelect");
      const selectedAgentId = agentSelect.value;
      const resultsDiv = document.getElementById("results");
    
      if (!selectedAgentId) {
        resultsDiv.textContent = "Please select an agent.";
        return;
      }
    
      resultsDiv.textContent = "Looking up Management Unit and Manager...";
    
      try {
        const user = muAllUsers.find(u => u.id === selectedAgentId);
    
        const muId = await muGetAgentManagementUnitId(selectedAgentId);
        const muName = muId ? await muGetManagementUnitName(muId) : "No Management Unit found";
    
        const managerName = user.manager ? await muGetManagerName(user.manager.id) : "No manager assigned";
    
        resultsDiv.innerHTML = `<p><strong>Management Unit:</strong> ${muName}</p><p><strong>Manager:</strong> ${managerName}</p>`;
      } catch (err) {
        console.error("MU or Manager lookup error:", err);
        resultsDiv.textContent = "Error: " + err.message;
      }
    }
    
    async function muGetManagerName(managerId) {
      try {
        const url = `https://api.${muRegion}/api/v2/users/${managerId}`;
        const resp = await fetch(url, {
          headers: {
            "Authorization": `Bearer ${muAccessToken}`,
            "Content-Type": "application/json"
          }
        });
        if (!resp.ok) {
          throw new Error(`Manager fetch failed: HTTP ${resp.status}`);
        }
        const data = await resp.json();
        return data.name || "Manager not found";
      } catch (err) {
        console.error("Error fetching manager:", err);
        return "Manager not found";
      }
    }
    
    async function muGetAgentManagementUnitId(userId) {
      const url = `https://api.${muRegion}/api/v2/workforcemanagement/agents/${userId}/managementunit`;
      const resp = await fetch(url, {
        headers: {
          "Authorization": `Bearer ${muAccessToken}`,
          "Content-Type": "application/json"
        }
      });
      if (!resp.ok) {
        throw new Error(`MU ID fetch failed: HTTP ${resp.status}`);
      }
      const data = await resp.json();
      return data.managementUnit?.id || null;
    }
    
    async function muGetManagementUnitName(muId) {
      const url = `https://api.${muRegion}/api/v2/workforcemanagement/managementunits?expand=businessUnit`;
      const resp = await fetch(url, {
        headers: {
          "Authorization": `Bearer ${muAccessToken}`,
          "Content-Type": "application/json"
        }
      });
      if (!resp.ok) {
        throw new Error(`ManagementUnits fetch failed: HTTP ${resp.status}`);
      }
      const data = await resp.json();
      const muArray = data.entities || [];
      const muObj = muArray.find(mu => mu.id === muId);
      if (!muObj) {
        return "No Management Unit found";
      }
      return muObj.name || "Unnamed Management Unit";
    }
  </script>
</body>
</html>
